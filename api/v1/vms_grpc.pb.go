// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vms_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *Username, opts ...grpc.CallOption) (*User, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/vms.v1.UserManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUser(ctx context.Context, in *Username, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/vms.v1.UserManager/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	Create(context.Context, *User) (*User, error)
	GetUser(context.Context, *Username) (*User, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) Create(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserManagerServer) GetUser(context.Context, *Username) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vms.v1.UserManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vms.v1.UserManager/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUser(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vms.v1.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserManager_Create_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserManager_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/vms.proto",
}

// VMManagerClient is the client API for VMManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMManagerClient interface {
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error)
	Start(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error)
	Stop(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error)
	Delete(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error)
}

type vMManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewVMManagerClient(cc grpc.ClientConnInterface) VMManagerClient {
	return &vMManagerClient{cc}
}

func (c *vMManagerClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error) {
	out := new(VMInfo)
	err := c.cc.Invoke(ctx, "/vms.v1.VMManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMManagerClient) Start(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error) {
	out := new(VMInfo)
	err := c.cc.Invoke(ctx, "/vms.v1.VMManager/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMManagerClient) Stop(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error) {
	out := new(VMInfo)
	err := c.cc.Invoke(ctx, "/vms.v1.VMManager/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMManagerClient) Delete(ctx context.Context, in *User, opts ...grpc.CallOption) (*VMInfo, error) {
	out := new(VMInfo)
	err := c.cc.Invoke(ctx, "/vms.v1.VMManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMManagerServer is the server API for VMManager service.
// All implementations must embed UnimplementedVMManagerServer
// for forward compatibility
type VMManagerServer interface {
	Create(context.Context, *User) (*VMInfo, error)
	Start(context.Context, *User) (*VMInfo, error)
	Stop(context.Context, *User) (*VMInfo, error)
	Delete(context.Context, *User) (*VMInfo, error)
	mustEmbedUnimplementedVMManagerServer()
}

// UnimplementedVMManagerServer must be embedded to have forward compatible implementations.
type UnimplementedVMManagerServer struct {
}

func (UnimplementedVMManagerServer) Create(context.Context, *User) (*VMInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVMManagerServer) Start(context.Context, *User) (*VMInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedVMManagerServer) Stop(context.Context, *User) (*VMInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedVMManagerServer) Delete(context.Context, *User) (*VMInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVMManagerServer) mustEmbedUnimplementedVMManagerServer() {}

// UnsafeVMManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMManagerServer will
// result in compilation errors.
type UnsafeVMManagerServer interface {
	mustEmbedUnimplementedVMManagerServer()
}

func RegisterVMManagerServer(s grpc.ServiceRegistrar, srv VMManagerServer) {
	s.RegisterService(&VMManager_ServiceDesc, srv)
}

func _VMManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vms.v1.VMManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMManagerServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vms.v1.VMManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMManagerServer).Start(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vms.v1.VMManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMManagerServer).Stop(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vms.v1.VMManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMManagerServer).Delete(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// VMManager_ServiceDesc is the grpc.ServiceDesc for VMManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vms.v1.VMManager",
	HandlerType: (*VMManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VMManager_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _VMManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _VMManager_Stop_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VMManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/vms.proto",
}
